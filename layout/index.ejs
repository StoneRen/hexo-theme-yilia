layout: false
permalink: /
---
<head>
<title>StoneRen -- 让网络为人们提供更大的便捷</title>
<link rel="icon" href="/img/favicon.png">
<meta charset="utf-8">
<meta name="keywords" content="nodejs,javascript,js,sailsjs,sails,photo,mysql,mongodb,express,async,await,btc,bitcoin,block"
/>
<style>
  body {
    color: #ffffff;
    font-family: "Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "微软雅黑", Arial, sans-serif;
    font-size: 22px;
    text-align: center;
    background-color: #000000;
    margin: 0px;
    overflow: hidden;
  }
  #info {
    position: absolute;
    top: 30%;
    width: 100%;
    padding: 5px;
  }
  a {
    color: #ffffff;
  }
  #oldie a {
    color: #da0;
  }
  #notSupported {
    display: none;
    width: 50%;
    margin: auto;
    border: 2px red solid;
    margin-top: 20px;
    padding: 10px;
  }
  header .avatar {
    border: 5px solid #fff;
    border-radius: 300px;
    width: 128px;
    height: 128px;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
    background: #88acdb;
    -webkit-transition: all 0.2s ease-in;
    display: -webkit-box;
    -webkit-box-orient: horizontal;
    -webkit-box-pack: center;
    -webkit-box-align: center;
    text-align: center;
  }
  header .avatar img {
    border: 0;
    vertical-align: middle;
    max-width: 100%;
    border-radius: 300px;
    opacity: 1;
    -webkit-transition: all 0.2s ease-in;
  }
</style>
</head>
<body>
<div id="info">
  <header>
    <a class="avatar" href="/archives/">
      <img src="https://avatars0.githubusercontent.com/u/2187168?v=3&amp;s=460">
    </a>
    <center>
      <a href="/archives/">https://stoneren.github.io</a>
      <p>深山磨石 只为寻玉</p>
      <p>让网络为人们提供更大的便捷</p>
      <p>
        <a href="/archives/">文章</a>
        <a href="/photo/">记录</a>
        <a href="/book/">读书</a>
        <a href="/digest/">书摘</a>
      </p>
      <div id="notSupported">你这么老旧的浏览器看不到本站效果了</div>
    </center>
  </header>
</div>
<div id="container"></div>
<script src="https://cdn.staticfile.org/three.js/r83/three.min.js"></script>
<script src="https://threejs.org/examples/js/Detector.js"></script>

<script id="vertexShader" type="x-shader/x-vertex">
  precision highp float;
  uniform float sineTime;
  uniform mat4 modelViewMatrix;
  uniform mat4 projectionMatrix;
  attribute vec3 position;
  attribute vec3 offset;
  attribute vec4 color;
  attribute vec4 orientationStart;
  attribute vec4 orientationEnd;
  varying vec3 vPosition;
  varying vec4 vColor;
  void main(){
    vPosition = offset * max(abs(sineTime * 3.0 + 1.0), 0.5) + position;
  vec4 orientation = normalize(mix(orientationStart,orientationEnd, sineTime));
  vec3 vcV = cross(orientation.xyz, vPosition);
  vPosition = vcV * (2.0 * orientation.w) + (cross(orientation.xyz, vcV) * 2.0 + vPosition);
  vColor = color;
  gl_Position = projectionMatrix * modelViewMatrix * vec4( vPosition, 1.0 ); }
</script>

<script id="fragmentShader" type="x-shader/x-fragment">
  precision highp float;
  uniform float time;
  varying vec3 vPosition;
  varying vec4 vColor;
  void main() {
    vec4 color = vec4(vColor );
    color.r += sin( vPosition.x * 10.0 + time ) * 0.8;
    color.g += cos( vPosition.y * 10.0 + time ) * 0.4;
    color.b += cos( vPosition.z * 10.0 + time ) * 0.6;
    gl_FragColor = color;
  }
</script>

<script>
  if (!Detector.webgl) Detector.addGetWebGLMessage();
  var mouseX = 0,
    mouseY = 0;
  var windowHalfX = window.innerWidth / 2;
  var windowHalfY = window.innerHeight / 2;
  var container;
  var camera, scene, renderer;
  var ua = navigator.userAgent.toLowerCase();
  //if(/MicroMessenger/i.test(ua)==false){
  init();
  animate();
  //}
  function onDocumentMouseMove(event) {
    mouseX = (event.clientX - windowHalfX) * 0.005;
    mouseY = (event.clientY - windowHalfY) * 0.005;
  }
  function onDocumentTouchStart(event) {
    if (event.touches.length === 1) {
      event.preventDefault();
      mouseX = event.touches[0].pageX - windowHalfX;
      mouseY = event.touches[0].pageY - windowHalfY;
    }
  }
  function onDocumentTouchMove(event) {
    if (event.touches.length === 1) {
      event.preventDefault();
      mouseX = event.touches[0].pageX - windowHalfX;
      mouseY = event.touches[0].pageY - windowHalfY;
    }
  }
  function init() {
    container = document.getElementById('container');
    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10);
    camera.position.z = 2;
    scene = new THREE.Scene();
    // geometry
    var triangles = 1;
    var instances = 500 + 200 * Math.random();
    var geometry = new THREE.InstancedBufferGeometry();
    geometry.maxInstancedCount = instances; // set so its initalized for dat.GUI, will be set in first draw otherwise
    var vertices = new THREE.BufferAttribute(new Float32Array(triangles * 3 *
      3), 3);
    vertices.setXYZ(0, 0.025, -0.025, 0);
    vertices.setXYZ(1, -0.025, 0.025, 0);
    vertices.setXYZ(2, 0, 0, 0.025);
    geometry.addAttribute('position', vertices);
    var offsets = new THREE.InstancedBufferAttribute(new Float32Array(
      instances * 3), 2, 10);
    for (var i = 0, ul = offsets.count; i < ul; i++) {
      offsets.setXYZ(i, Math.random() - 0.5, Math.random() - 0.5, Math.random() -
        0.9);
    }
    geometry.addAttribute('offset', offsets);
    var colors = new THREE.InstancedBufferAttribute(new Float32Array(
      instances * 2), 2, 1);
    for (var i = 0, ul = colors.count; i < ul; i++) {
      colors.setXYZW(i, Math.random(), Math.random(), Math.random(), Math.random());
    }
    geometry.addAttribute('color', colors);
    var vector = new THREE.Vector4();
    var orientationsStart = new THREE.InstancedBufferAttribute(new Float32Array(
      instances * 2), 2, 1);
    for (var i = 0, ul = orientationsStart.count; i < ul; i++) {
      vector.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() *
        2 - 1, Math.random() * 2 - 1);
      vector.normalize();
      orientationsStart.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
    }
    geometry.addAttribute('orientationStart', orientationsStart);
    var orientationsEnd = new THREE.InstancedBufferAttribute(new Float32Array(
      instances * 4), 4, 1);
    for (var i = 0, ul = orientationsEnd.count; i < ul; i++) {
      vector.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() *
        2 - 1, Math.random() * 2 - 1);
      vector.normalize();
      orientationsEnd.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
    }
    geometry.addAttribute('orientationEnd', orientationsEnd);
    // material
    var material = new THREE.RawShaderMaterial(
      {
        uniforms:
        {
          time:
          {
            value: 1.0
          },
          sineTime:
          {
            value: 2.0
          }
        },
        vertexShader: document.getElementById('vertexShader').textContent,
        fragmentShader: document.getElementById('fragmentShader').textContent,
        side: THREE.DoubleSide,
        transparent: true
      });
    var mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer();
    if (renderer.extensions.get('ANGLE_instanced_arrays') === false) {
      document.getElementById("notSupported").style.display = "";
      return;
    }
    renderer.setClearColor(0x101010);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    //document.addEventListener('mousemove', onDocumentMouseMove, false);
    //document.addEventListener('touchstart', onDocumentTouchStart, false);
    //document.addEventListener('touchmove', onDocumentTouchMove, false);
    window.addEventListener('resize', onWindowResize, false);
  }
  function onWindowResize(event) {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }
  function animate() {
    requestAnimationFrame(animate);
    render();
  }
  function render() {
    var time = performance.now();
    var object = scene.children[0];
    var tValue=object.material.uniforms.time.value =  time * 0.005;
    object.rotation.x = time * 0.0005;
    //object.rotation.y = time * 0.0005;
    object.rotation.z = time * 0.00005;
    object.material.uniforms.sineTime.value = Math.sin(tValue * 0.21)*0.1;
    //camera.position.x = Math.sin(tValue)*0.1;
    //camera.position.y = Math.cos(tValue)*0.1*0.1;
    camera.lookAt(scene.position);
    renderer.render(scene, camera);
  }
</script>
<script>
  var _hmt = _hmt || [];
  (function () {
    var hm = document.createElement("script");
    hm.src = "https://hm.baidu.com/hm.js?f9aa8ec02681584daa2b90731488b571";
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(hm, s);
  })();
  (function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
      (i[r].q = i[r].q || []).push(arguments)
    }, i[r].l = 1 * new Date(); a = s.createElement(o),
      m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
  })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
  ga('create', 'UA-104993594-1', 'auto');
  ga('send', 'pageview');
</script>
</body>
